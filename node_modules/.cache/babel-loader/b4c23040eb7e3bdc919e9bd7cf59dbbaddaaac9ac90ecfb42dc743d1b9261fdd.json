{"ast":null,"code":"var _jsxFileName = \"/Users/amynye/FinalProjectSWE/src/comps/Chat.js\",\n  _s = $RefreshSig$();\nimport dotenv from 'dotenv';\nimport React, { useState } from 'react';\nimport './chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [showIntro, setShowIntro] = useState(true);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: input,\n      sender: 'user'\n    }]);\n    setInput('');\n    setShowIntro(false);\n    await handleAIResponse(input);\n  };\n  const handleAIResponse = async userMessage => {\n    try {\n      const conversation = [{\n        role: 'user',\n        content: userMessage\n      }, ...messages.map(msg => ({\n        role: msg.sender,\n        content: msg.text\n      }))];\n      console.log('Conversation:', conversation);\n      dotenv.config();\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': process.env.OPEN_AI // Replace with your OpenAI API key\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: conversation\n        })\n      });\n      console.log('OpenAI Response:', response);\n      if (!response.ok) {\n        throw new Error('Failed to fetch AI response');\n      }\n      const data = await response.json();\n      const aiResponse = data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        text: aiResponse,\n        sender: 'advisor'\n      }]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ChatContainer\",\n    children: [(showIntro || messages.length === 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"IntroSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://upload.wikimedia.org/wikipedia/en/b/b4/Howard_Bison_logo.svg\",\n        alt: \"Logo\",\n        className: \"bison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"How can I help you today?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `Message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"InputBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          value: input,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"9h/xTrEBL1fMSnxVrtoC3eI9z98=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["dotenv","React","useState","jsxDEV","_jsxDEV","Chat","_s","input","setInput","messages","setMessages","showIntro","setShowIntro","handleInputChange","e","target","value","handleSendMessage","prevMessages","text","sender","handleAIResponse","userMessage","conversation","role","content","map","msg","console","log","config","response","fetch","method","headers","process","env","OPEN_AI","body","JSON","stringify","model","ok","Error","data","json","aiResponse","choices","message","error","className","children","length","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","index","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/amynye/FinalProjectSWE/src/comps/Chat.js"],"sourcesContent":["import dotenv from 'dotenv';\nimport React, { useState } from 'react';\nimport './chat.css';\n\nfunction Chat() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [showIntro, setShowIntro] = useState(true);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    setMessages((prevMessages) => [...prevMessages, { text: input, sender: 'user' }]);\n    setInput('');\n    setShowIntro(false); \n\n    \n    await handleAIResponse(input);\n  };\n\n  const handleAIResponse = async (userMessage) => {\n    try {\n      \n      const conversation = [\n        { role: 'user', content: userMessage },\n        ...messages.map((msg) => ({ role: msg.sender, content: msg.text })),\n      ];\n\n      \n      console.log('Conversation:', conversation);\n\n      dotenv.config()\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': process.env.OPEN_AI, // Replace with your OpenAI API key\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: conversation,\n        }),\n      });\n      \n\n\n      console.log('OpenAI Response:', response);\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch AI response');\n      }\n      \n      const data = await response.json();\n\n      \n      const aiResponse = data.choices[0].message.content;\n\n      setMessages((prevMessages) => [...prevMessages, { text: aiResponse, sender: 'advisor' }]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error.message);\n    }\n  };\n\n  return (\n    <div className=\"ChatContainer\">\n      {(showIntro || messages.length === 0) && (\n        <div className=\"IntroSection\">\n          <img src=\"https://upload.wikimedia.org/wikipedia/en/b/b4/Howard_Bison_logo.svg\" alt=\"Logo\"  className='bison'/>\n          <p>How can I help you today?</p>\n        </div>\n      )}\n      <div className=\"ChatBox\">\n        <div className=\"Messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`Message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <div className=\"InputBox\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            value={input}\n            onChange={handleInputChange}\n          />\n          <button onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMW,iBAAiB,GAAIC,CAAC,IAAK;IAC/BN,QAAQ,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpCP,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;MAAEC,IAAI,EAAEZ,KAAK;MAAEa,MAAM,EAAE;IAAO,CAAC,CAAC,CAAC;IACjFZ,QAAQ,CAAC,EAAE,CAAC;IACZI,YAAY,CAAC,KAAK,CAAC;IAGnB,MAAMS,gBAAgB,CAACd,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMc,gBAAgB,GAAG,MAAOC,WAAW,IAAK;IAC9C,IAAI;MAEF,MAAMC,YAAY,GAAG,CACnB;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEH;MAAY,CAAC,EACtC,GAAGb,QAAQ,CAACiB,GAAG,CAAEC,GAAG,KAAM;QAAEH,IAAI,EAAEG,GAAG,CAACP,MAAM;QAAEK,OAAO,EAAEE,GAAG,CAACR;MAAK,CAAC,CAAC,CAAC,CACpE;MAGDS,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,YAAY,CAAC;MAE1CvB,MAAM,CAAC8B,MAAM,CAAC,CAAC;MACf,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAEC,OAAO,CAACC,GAAG,CAACC,OAAO,CAAE;QACxC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,eAAe;UACtBhC,QAAQ,EAAEc;QACZ,CAAC;MACH,CAAC,CAAC;MAIFK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,QAAQ,CAAC;MAEzC,IAAI,CAACA,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAGlC,MAAMC,UAAU,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACvB,OAAO;MAElDf,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAE2B,UAAU;QAAE1B,MAAM,EAAE;MAAU,CAAC,CAAC,CAAC;IAC3F,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdrB,OAAO,CAACqB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACD,OAAO,CAAC;IAC7D;EACF,CAAC;EAED,oBACE5C,OAAA;IAAK8C,SAAS,EAAC,eAAe;IAAAC,QAAA,GAC3B,CAACxC,SAAS,IAAIF,QAAQ,CAAC2C,MAAM,KAAK,CAAC,kBAClChD,OAAA;MAAK8C,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B/C,OAAA;QAAKiD,GAAG,EAAC,sEAAsE;QAACC,GAAG,EAAC,MAAM;QAAEJ,SAAS,EAAC;MAAO;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAC/GtD,OAAA;QAAA+C,QAAA,EAAG;MAAyB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CACN,eACDtD,OAAA;MAAK8C,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtB/C,OAAA;QAAK8C,SAAS,EAAC,UAAU;QAAAC,QAAA,EACtB1C,QAAQ,CAACiB,GAAG,CAAC,CAACsB,OAAO,EAAEW,KAAK,kBAC3BvD,OAAA;UAAiB8C,SAAS,EAAG,WAAUF,OAAO,CAAC5B,MAAO,EAAE;UAAA+B,QAAA,EACrDH,OAAO,CAAC7B;QAAI,GADLwC,KAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNtD,OAAA;QAAK8C,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvB/C,OAAA;UACEwD,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,mBAAmB;UAC/B7C,KAAK,EAAET,KAAM;UACbuD,QAAQ,EAAEjD;QAAkB;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,eACFtD,OAAA;UAAQ2D,OAAO,EAAE9C,iBAAkB;UAAAkC,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpD,EAAA,CAzFQD,IAAI;AAAA2D,EAAA,GAAJ3D,IAAI;AA2Fb,eAAeA,IAAI;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}