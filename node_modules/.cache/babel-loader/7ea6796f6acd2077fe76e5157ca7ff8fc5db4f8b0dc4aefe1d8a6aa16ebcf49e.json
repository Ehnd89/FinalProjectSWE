{"ast":null,"code":"var _jsxFileName = \"/Users/amynye/FinalProjectSWE/src/comps/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStarted, setChatStarted] = useState(false);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: input,\n      sender: 'user'\n    }]);\n    setInput('');\n    if (!chatStarted) {\n      // If chat has not started, set chatStarted to true\n      setChatStarted(true);\n    } else {\n      // Send the user's message to the server and handle AI response\n      await handleAIResponse(input);\n    }\n  };\n  const handleAIResponse = async userMessage => {\n    try {\n      // Prepare the conversation format for OpenAI\n      const conversation = [{\n        role: 'user',\n        content: userMessage\n      }, ...messages.map(msg => ({\n        role: msg.sender,\n        content: msg.text\n      }))];\n\n      // Log the conversation for debugging\n      console.log('Conversation:', conversation);\n\n      // Make a POST request to OpenAI API\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer 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' // Replace with your OpenAI API key\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: conversation\n        })\n      });\n\n      // Log the OpenAI response for debugging\n      console.log('OpenAI Response:', response);\n      if (!response.ok) {\n        throw new Error('Failed to fetch AI response');\n      }\n      const data = await response.json();\n\n      // Extract the assistant's reply from the OpenAI response\n      const aiResponse = data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        text: aiResponse,\n        sender: 'advisor'\n      }]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ChatContainer\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `Message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"InputBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          value: input,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"B5yAUOnGznKqrbpRXrRpjIH7s9c=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","input","setInput","messages","setMessages","chatStarted","setChatStarted","handleInputChange","e","target","value","handleSendMessage","prevMessages","text","sender","handleAIResponse","userMessage","conversation","role","content","map","msg","console","log","response","fetch","method","headers","body","JSON","stringify","model","ok","Error","data","json","aiResponse","choices","message","error","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/amynye/FinalProjectSWE/src/comps/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './chat.css';\n\nfunction Chat() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStarted, setChatStarted] = useState(false);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    setMessages((prevMessages) => [...prevMessages, { text: input, sender: 'user' }]);\n    setInput('');\n\n    if (!chatStarted) {\n      // If chat has not started, set chatStarted to true\n      setChatStarted(true);\n    } else {\n      // Send the user's message to the server and handle AI response\n      await handleAIResponse(input);\n    }\n  };\n\n  const handleAIResponse = async (userMessage) => {\n    try {\n      // Prepare the conversation format for OpenAI\n      const conversation = [\n        { role: 'user', content: userMessage },\n        ...messages.map((msg) => ({ role: msg.sender, content: msg.text })),\n      ];\n\n      // Log the conversation for debugging\n      console.log('Conversation:', conversation);\n\n      // Make a POST request to OpenAI API\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer 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', // Replace with your OpenAI API key\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: conversation,\n        }),\n      });\n\n      // Log the OpenAI response for debugging\n      console.log('OpenAI Response:', response);\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch AI response');\n      }\n\n      const data = await response.json();\n\n      // Extract the assistant's reply from the OpenAI response\n      const aiResponse = data.choices[0].message.content;\n\n      setMessages((prevMessages) => [...prevMessages, { text: aiResponse, sender: 'advisor' }]);\n    } catch (error) {\n      console.error('Error fetching AI response:', error.message);\n    }\n  };\n\n\n  return (\n    <div className=\"ChatContainer\"> {/* Add the ChatContainer class here */}\n      <div className=\"ChatBox\">\n        <div className=\"Messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`Message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <div className=\"InputBox\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            value={input}\n            onChange={handleInputChange}\n          />\n          <button onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}